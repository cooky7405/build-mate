# 버그 리포트 v1.0

## 1. 사용자 인증 관련 버그

### 1.1 인증 토큰 관리 문제
- 문제: 로그인 후 API 요청 시 401 Unauthorized 오류 발생
- 원인:
  1. 클라이언트에서 js-cookie로 설정한 쿠키가 API 요청에 포함되지 않음
  2. `/api/users/me` 엔드포인트에서 authKey 검증 로직 오류
  3. 인증키 검증 시 해시된 값과 원본 값의 비교가 잘못됨
- 수정:
  1. 로그인 API에서 HTTP-only 쿠키로 authKey 설정
  
  수정 전:
  ```typescript
  // app/auth/login/page.tsx
  const response = await userApi.login(data);
  Cookies.set("authKey", response.authKey, {
    expires: 7,
    path: "/",
    sameSite: "lax",
  });
  ```

  수정 후:
  ```typescript
  // app/api/users/login/route.ts
  const response = NextResponse.json({
    user: userWithoutSensitive,
    authKey,
  });

  response.cookies.set("authKey", authKey, {
    httpOnly: true,
    secure: process.env.NODE_ENV === "production",
    sameSite: "lax",
    path: "/",
    maxAge: 7 * 24 * 60 * 60,
  });
  ```

  2. `/api/users/me` 엔드포인트의 사용자 검증 로직 개선
  
  수정 전:
  ```typescript
  // app/api/users/me/route.ts
  const user = await prisma.user.findFirst({
    where: {
      authKey: {
        not: null,
      },
    },
  });

  if (!user) {
    return NextResponse.json(
      { error: "사용자를 찾을 수 없습니다." },
      { status: 401 }
    );
  }

  const isValidAuthKey = await bcrypt.compare(authKeyValue, user.authKey!);
  ```

  수정 후:
  ```typescript
  // app/api/users/me/route.ts
  const users = await prisma.user.findMany({
    where: {
      authKey: {
        not: null,
      },
    },
  });

  let matchedUser = null;
  for (const user of users) {
    const isValidAuthKey = await bcrypt.compare(authKeyValue, user.authKey!);
    if (isValidAuthKey) {
      matchedUser = user;
      break;
    }
  }

  if (!matchedUser) {
    console.log("인증 실패: 유효한 authKey를 가진 사용자를 찾을 수 없음");
    return NextResponse.json(
      { error: "유효하지 않은 인증키입니다." },
      { status: 401 }
    );
  }
  ```

  3. 로깅 개선
  
  수정 전:
  ```typescript
  // app/api/users/login/route.ts
  console.log("로그인 성공:", {
    userId: user.id,
    email: user.email,
  });
  ```

  수정 후:
  ```typescript
  // app/api/users/login/route.ts
  console.log("로그인 성공 응답 전송:", {
    userId: user.id,
    email: user.email,
    role: user.role.name,
    authKeyLength: authKey.length,
    responseHeaders: Object.fromEntries(response.headers.entries()),
    cookies: Object.fromEntries(response.cookies.getAll().map(c => [c.name, "설정됨"])),
  });
  ```

### 1.2 로그인 상태 관리 개선
- 문제: 로그인 상태가 페이지 새로고침 시 초기화됨
- 원인: 클라이언트 측 상태 관리에 의존
- 수정:
  1. HTTP-only 쿠키 기반으로 인증 상태 관리
  2. 모든 API 요청에 쿠키가 자동으로 포함되도록 수정
  3. 네비게이션 바에서 사용자 정보 조회 시 쿠키 기반 인증 사용

  수정 전:
  ```typescript
  // app/components/Navbar.tsx
  const [user, setUser] = useState<User | null>(null);

  useEffect(() => {
    const authKey = Cookies.get("authKey");
    if (authKey) {
      userApi.getCurrentUser()
        .then(user => setUser(user))
        .catch(() => setUser(null));
    }
  }, []);
  ```

  수정 후:
  ```typescript
  // app/components/Navbar.tsx
  const [user, setUser] = useState<User | null>(null);

  useEffect(() => {
    userApi.getCurrentUser()
      .then(user => setUser(user))
      .catch(() => setUser(null));
  }, []);
  ```

## 2. 보안 관련 개선사항

### 2.1 쿠키 보안 강화
- 문제: 클라이언트 JavaScript에서 인증 토큰에 접근 가능
- 원인: 일반 쿠키 사용
- 수정:
  1. HTTP-only 쿠키 사용으로 JavaScript 접근 차단
  2. secure 플래그로 HTTPS 통신 강제
  3. sameSite 설정으로 CSRF 공격 방지
  4. 쿠키 만료 시간을 7일로 설정

### 2.2 인증키 검증 로직 강화
- 문제: 단순 문자열 비교로 인증키 검증
- 원인: 해시된 인증키와 원본 값 비교 로직 미흡
- 수정:
  
  수정 전:
  ```typescript
  // app/api/users/me/route.ts
  if (user.authKey !== authKeyValue) {
    return NextResponse.json(
      { error: "유효하지 않은 인증키입니다." },
      { status: 401 }
    );
  }
  ```

  수정 후:
  ```typescript
  // app/api/users/me/route.ts
  const isValidAuthKey = await bcrypt.compare(authKeyValue, user.authKey!);
  if (!isValidAuthKey) {
    console.log("인증 실패: 유효하지 않은 authKey");
    return NextResponse.json(
      { error: "유효하지 않은 인증키입니다." },
      { status: 401 }
    );
  }
  ```

### 2.3 인증 프로세스 모니터링 강화
- 문제: 인증 실패 시 원인 파악이 어려움
- 원인: 로깅 부족
- 수정:
  
  수정 전:
  ```typescript
  // app/api/users/me/route.ts
  } catch (error) {
    console.error("Error:", error);
    return NextResponse.json(
      { error: "인증에 실패했습니다." },
      { status: 500 }
    );
  }
  ```

  수정 후:
  ```typescript
  // app/api/users/me/route.ts
  } catch (error) {
    console.error("사용자 정보 조회 실패:", {
      error: error instanceof Error
        ? {
            name: error.name,
            message: error.message,
            stack: error.stack,
          }
        : error,
    });

    return NextResponse.json(
      {
        error: `사용자 정보 조회에 실패했습니다: ${
          error instanceof Error ? error.message : "알 수 없는 오류"
        }`,
      },
      { status: 500 }
    );
  }
  ```
